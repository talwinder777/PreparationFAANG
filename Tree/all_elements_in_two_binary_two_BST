//1305
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        
        Stack<TreeNode> st1 = new Stack<>();
        Stack<TreeNode> st2 = new Stack<>();
        
        List<Integer> res = new ArrayList<>();
        while(root1 != null || root2 != null || !st1.isEmpty() || !st2.isEmpty()) {
            
            while (root1 != null) {
                
                st1.push(root1);
                root1 = root1.left;
            }
            
            while (root2 != null) {
                
                st2.push(root2);
                root2 = root2.left;
            }
            System.out.println("st2 = "+st2);
            // System.out.println("st2 r = "+st2.peek().val);
            //AND and OR precedence => in OR if block is run if any statement appearing first get true. In the below if, when stack 2 is empty then the check of values is not done and its only done when both stack are not empty.
            //NOt in this solution but AND look for first false statement to exist the block
            
            if (st2.isEmpty() || !st1.isEmpty() && (st1.peek().val <= st2.peek().val)) {
                
                root1 = st1.pop();
                System.out.println("st1 root = "+root1.val);
                res.add(root1.val);
                root1 = root1.right;
                
            }
            else {
                root2 = st2.pop();
                System.out.println("st2 root = "+root2.val);
                res.add(root2.val);
                root2 = root2.right;
            }
        }
        
        return res;
        
    }
}
